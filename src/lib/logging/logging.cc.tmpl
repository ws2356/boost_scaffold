#include <fstream>
#include <spdlog/spdlog.h>
#include <spdlog/cfg/env.h>
#include <spdlog/sinks/basic_file_sink.h>
#include <spdlog/sinks/rotating_file_sink.h>
#include <spdlog/sinks/stdout_color_sinks.h>
#include <spdlog/async.h>
#include "logging.h"

namespace project_name {
    void log::initLog() {
      spdlog::init_thread_pool(8192, 1);

      auto console_sink = std::make_shared<spdlog::sinks::stdout_color_sink_mt>();
      console_sink->set_pattern("[project_name] [%^%l%$] %v");

      // 16MiB * 10
      auto max_size = 16 << 20;
      auto max_files = 10;
      auto file_sink = std::make_shared<spdlog::sinks::rotating_file_sink_mt>(
          "logs/project_name.log",
          max_size,
          max_files);

      std::vector<spdlog::sink_ptr> sinks{console_sink, file_sink};
      auto logger = std::make_shared<spdlog::async_logger>("logger", sinks.begin(), sinks.end(), spdlog::thread_pool(), spdlog::async_overflow_policy::block);
      spdlog::register_logger(logger);

      spdlog::flush_every(std::chrono::seconds(3));

      spdlog::cfg::load_env_levels();
    }

}
